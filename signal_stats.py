# file: signal_stats.py
import pandas as pd
import numpy as np

def calculate_signal_stats(df: pd.DataFrame):
    """
    T√≠nh to√°n hi·ªáu su·∫•t c√°c t√≠n hi·ªáu giao d·ªãch.
    ƒê·∫ßu v√†o: DataFrame ch·ª©a c√°c c·ªôt ['time', 'Signal', 'Entry', 'TP', 'SL', 'close', 'high', 'low']
    """

    if df is None or df.empty:
        print("‚ö†Ô∏è Kh√¥ng c√≥ t√≠n hi·ªáu ƒë·ªÉ th·ªëng k√™.")
        return {
            'total_signals': 0,
            'winrate': 0,
            'avg_profit': 0,
            'total_profit': 0,
            'details': pd.DataFrame()
        }

    required_cols = {'time', 'Signal', 'Entry', 'TP', 'SL', 'close'}
    missing_cols = required_cols - set(df.columns)
    if missing_cols:
        raise ValueError(f"‚ùå Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {missing_cols}")

    df = df.copy().reset_index(drop=True)
    results = []

    for i, row in df.iterrows():
        signal = row['Signal']
        entry = row['Entry']
        tp = row['TP']
        sl = row['SL']

        # N·∫øu kh√¥ng c√≥ gi√° high/low, d√πng close thay th·∫ø
        if i + 1 < len(df):
            next_candle = df.iloc[i + 1]
            high = next_candle.get('high', row['close'])
            low = next_candle.get('low', row['close'])
            close = next_candle.get('close', row['close'])
        else:
            high = low = close = row['close']

        # --- X·ª≠ l√Ω BUY ---
        if signal.upper() == 'BUY':
            if high >= tp:
                result = "TP"
                profit = (tp - entry) / entry
            elif low <= sl:
                result = "SL"
                profit = (sl - entry) / entry
            else:
                result = "CLOSE"
                profit = (close - entry) / entry

        # --- X·ª≠ l√Ω SELL ---
        elif signal.upper() == 'SELL':
            if low <= tp:
                result = "TP"
                profit = (entry - tp) / entry
            elif high >= sl:
                result = "SL"
                profit = (entry - sl) / entry
            else:
                result = "CLOSE"
                profit = (entry - close) / entry

        else:
            continue  # B·ªè qua n·∫øu kh√¥ng c√≥ t√≠n hi·ªáu h·ª£p l·ªá

        results.append({
            'time': row['time'],
            'Signal': signal,
            'Entry': entry,
            'TP': tp,
            'SL': sl,
            'Exit': close,
            'Result': result,
            'Profit(%)': round(profit * 100, 2)
        })

    # --- T·ªïng h·ª£p th·ªëng k√™ ---
    result_df = pd.DataFrame(results)
    total_signals = len(result_df)
    winrate = (result_df['Profit(%)'] > 0).mean() if total_signals > 0 else 0
    avg_profit = result_df['Profit(%)'].mean() if total_signals > 0 else 0
    total_profit = result_df['Profit(%)'].sum() if total_signals > 0 else 0

    # --- In k·∫øt qu·∫£ ---
    print("\nüìä ===== TH·ªêNG K√ä T√çN HI·ªÜU =====")
    print(f"üìà T·ªïng s·ªë t√≠n hi·ªáu: {total_signals}")
    print(f"‚úÖ Winrate: {winrate * 100:.2f}%")
    print(f"üí∞ L·ª£i nhu·∫≠n trung b√¨nh: {avg_profit:.2f}%")
    print(f"üíπ T·ªïng l·ª£i nhu·∫≠n: {total_profit:.2f}%")

    # --- G·∫Øn m√†u k·∫øt qu·∫£ ƒë·ªÉ d·ªÖ nh√¨n khi in log ---
    result_df['Color'] = np.where(
        result_df['Result'] == 'TP', 'üü¢',
        np.where(result_df['Result'] == 'SL', 'üî¥', 'üü°')
    )

    return {
        'total_signals': total_signals,
        'winrate': winrate,
        'avg_profit': avg_profit,
        'total_profit': total_profit,
        'details': result_df
    }
