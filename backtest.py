# backtest.py
import pandas as pd
import numpy as np
from datetime import timedelta, timezone
from multiprocessing import Pool, cpu_count
from typing import List, Dict, Optional

import config  # Import constants from config.py
from data_fetcher import get_historical_data
from strategy import generate_signals
import traceback
import random
import os

# Thi·∫øt l·∫≠p m√∫i gi·ªù Vi·ªát Nam (n·∫øu c·∫ßn, nh∆∞ng hi·ªán kh√¥ng d√πng tr·ª±c ti·∫øp)
VIETNAM_TZ = timezone(timedelta(hours=7))

RESULT_FILE = "backtest_results.csv"
TRADES_FILE = "backtest_trades.csv"


def backtest_coin(args: tuple) -> List[Dict]:
    """Ch·∫°y backtest cho 1 ƒë·ªìng coin tr√™n c√°c khung th·ªùi gian."""
    symbol, intervals = args
    all_trades = []
    print(f"\nüîç B·∫Øt ƒë·∫ßu backtest {symbol}")

    for interval in intervals:
        try:
            # === L·∫•y d·ªØ li·ªáu gi√° ===
            df = get_historical_data(symbol, interval, days=365)
            if df.empty:
                print(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu {symbol} ({interval})")
                continue

            # === Sinh t√≠n hi·ªáu giao d·ªãch ===
            signals = generate_signals(df)
            if signals.empty:
                print(f"‚ö†Ô∏è Kh√¥ng c√≥ t√≠n hi·ªáu cho {symbol} ({interval})")
                continue

            # === Duy·ªát t·ª´ng t√≠n hi·ªáu (vectorized hit check) ===
            for _, s in signals.iterrows():
                entry_price = s["Entry"]
                tp = s["TP"]
                sl = s["SL"]
                signal = s["Signal"]
                entry_time = s["time"]

                # L·∫•y d·ªØ li·ªáu t∆∞∆°ng lai sau th·ªùi ƒëi·ªÉm v√†o l·ªánh (gi·ªõi h·∫°n 50 n·∫øn)
                future_df = df[df["time"] > entry_time].head(50)
                if future_df.empty:
                    continue

                result = "NONE"
                profit = 0.0

                # Vectorized check for TP/SL hit
                if signal == "BUY":
                    hit_tp = future_df["high"] >= tp
                    hit_sl = future_df["low"] <= sl
                else:  # SELL
                    hit_tp = future_df["low"] <= tp
                    hit_sl = future_df["high"] >= sl

                first_hit_idx = np.inf
                if hit_tp.any():
                    first_hit_idx = hit_tp.idxmin()
                    result = "TP"
                #∆∞u ti√™n TP
                # if hit_sl.any():
                #     sl_idx = hit_sl.idxmin()
                #     if sl_idx < first_hit_idx:
                #         first_hit_idx = sl_idx
                #         result = "SL"

                # ∆∞u ti√™n SL
                if hit_sl.any():
                    sl_idx = hit_sl.idxmin()
                    if sl_idx <= first_hit_idx:  # d√πng <= thay v√¨ <
                        first_hit_idx = sl_idx
                        result = "SL"

                if result != "NONE":
                    if signal == "BUY":
                        exit_price = tp if result == "TP" else sl
                        profit = (exit_price - entry_price) / entry_price
                    else:
                        exit_price = tp if result == "TP" else sl
                        profit = (entry_price - exit_price) / entry_price
                else:
                    continue  # B·ªè n·∫øu kh√¥ng hit trong 50 n·∫øn

                all_trades.append({
                    "Symbol": symbol,
                    "Interval": interval,
                    "Signal": signal,
                    "Result": result,
                    "Profit": profit,
                    "Entry": entry_price,
                    "TP": tp,
                    "SL": sl,
                    "Time": entry_time
                })

        except Exception as e:
            print(f"‚ùå L·ªói backtest {symbol} ({interval}): {e}")
            traceback.print_exc()

    return all_trades


def run_backtest(sample_size: Optional[int] = None):
    """Ch·∫°y backtest to√†n b·ªô danh s√°ch coin trong COIN_LIST (ƒëa lu·ªìng)."""
    all_trades = []
    intervals = config.INTERVALS  # ["15m", "30m", "1h"]
    intervals = ["30m"]
    # Sample n·∫øu c·∫ßn test nhanh
    coins = config.COIN_LIST
    if sample_size:
        coins = random.sample(coins, min(sample_size, len(coins)))

    print(f"\nüöÄ B·∫Øt ƒë·∫ßu backtest cho {len(coins)} ƒë·ªìng coin...")

    coins = [
        "BTCUSDT",
        "ETHUSDT",
        "BNBUSDT",
        "XRPUSDT",
        "SOLUSDT",
        "TRXUSDT",
        "DOGEUSDT",
        "ADAUSDT",
        "HYPEUSDT",
        "LINKUSDT",
        "XLMUSDT",
        "BCHUSDT",
        "SUIUSDT",
        "AVAXUSDT",
        "LTCUSDT",
        "HBARUSDT",
        "XMRUSDT",
        "TAOUSDT",
        "TONUSDT",
        "DOTUSDT",
    ]

    coins = [
        "BTCUSDT",
        "ETHUSDT",
        "BNBUSDT",
        "XRPUSDT",
        "SOLUSDT",
        "SUIUSDT",
        "DOGEUSDT",
        "ADAUSDT",
        "HYPEUSDT",
        "LINKUSDT",
    ]

    # ƒêa lu·ªìng v·ªõi multiprocessing
    num_processes = min(cpu_count(), config.MAX_THREADS)
    with Pool(processes=num_processes) as pool:
        args = [(coin, intervals) for coin in coins]
        results = pool.map(backtest_coin, args)
        for trades in results:
            all_trades.extend(trades)

    if not all_trades:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu backtest.")
        return

    # === T·ªïng h·ª£p k·∫øt qu·∫£ ===
    df = pd.DataFrame(all_trades)
    df["Profit %"] = df["Profit"] * 100

    total_trades = len(df)
    tp_trades = df[df["Result"] == "TP"]
    sl_trades = df[df["Result"] == "SL"]
    win_rate = len(tp_trades) / total_trades * 100 if total_trades > 0 else 0
    avg_profit = df["Profit"].mean() * 100
    total_profit = df["Profit"].sum() * 100

    summary = {
        "T·ªïng l·ªánh": total_trades,
        "TP": len(tp_trades),
        "SL": len(sl_trades),
        "NONE": len(df[df["Result"] == "NONE"]),
        "T·ª∑ l·ªá th·∫Øng (%)": round(win_rate, 2),
        "L·ª£i nhu·∫≠n trung b√¨nh (%)": round(avg_profit, 2),
        "T·ªïng l·ª£i nhu·∫≠n (%)": round(total_profit, 2)
    }

    # === In k·∫øt qu·∫£ ===
    print("\nüìä K·∫æT QU·∫¢ BACKTEST T·ªîNG H·ª¢P")
    for k, v in summary.items():
        print(f"{k}: {v}")

    # === L∆∞u file ===
    df.to_csv(TRADES_FILE, index=False)
    pd.DataFrame([summary]).to_csv(RESULT_FILE, index=False)

    print(f"\n‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o '{RESULT_FILE}' v√† '{TRADES_FILE}'.")


if __name__ == "__main__":
    run_backtest(sample_size=50)
    # run_backtest()  # Ho·∫∑c run_backtest(sample_size=50) ƒë·ªÉ test nhanh